apiVersion: v1
kind: Namespace
metadata:
  name: jupyter-system
---
apiVersion: v1
kind: Secret
metadata:
  name: jupyterhub-secret
  namespace: jupyter-system
type: Opaque
data:
  # Using your existing cookie secret
  cookie_secret: MDdmZTVmN2EwNDg0MGI2N2RjZjJiOWJkMWJlYjQyY2Y0ZjZlMWViOWJjYjU4ZjRjYTFkNTM3YzY0NjkzNjgyYQ==
  # Base64 encoded "admin" password from jupyterhub_config.py
  admin_password: YWRtaW4=
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jupyterhub
  namespace: jupyter-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: jupyterhub
  namespace: jupyter-system
rules:
- apiGroups: [""]
  resources: ["pods", "persistentvolumeclaims"]
  verbs: ["get", "watch", "list", "create", "delete"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["get", "watch", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: jupyterhub
  namespace: jupyter-system
subjects:
- kind: ServiceAccount
  name: jupyterhub
  namespace: jupyter-system
roleRef:
  kind: Role
  name: jupyterhub
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: jupyterhub-config
  namespace: jupyter-system
data:
  jupyterhub_config.py: |
    c = get_config()
    
    # Basic config
    c.JupyterHub.ip = '0.0.0.0'
    c.JupyterHub.port = 8000
    c.JupyterHub.admin_access = True
    
    # Authentication - using DummyAuthenticator as in your config
    from jupyterhub.auth import DummyAuthenticator
    c.JupyterHub.authenticator_class = DummyAuthenticator
    c.DummyAuthenticator.password = "admin"
    c.Authenticator.any_allow_config = True
    
    # User list - specified users from your config
    c.Authenticator.allowed_users = ["user1", "user2"]
    c.Authenticator.admin_users = ["user1"]
    
    # API tokens
    c.JupyterHub.api_tokens = {
        "user1-token": "user1",
        "user2-token": "user2",
    }
    
    # Kubernetes spawner
    from kubespawner import KubeSpawner
    c.JupyterHub.spawner_class = KubeSpawner
    
    # Use the JupyterLab image from Nexus
    c.KubeSpawner.image = "nexus.adlibml.com/jupyter-lab:latest"
    c.KubeSpawner.namespace = 'jupyter-system'
    c.KubeSpawner.service_account = 'jupyterhub'
    
    # Resource allocation for user pods
    c.KubeSpawner.cpu_guarantee = 0.5
    c.KubeSpawner.cpu_limit = 1.0
    c.KubeSpawner.mem_guarantee = '1G'
    c.KubeSpawner.mem_limit = '2G'
    
    # Persistent storage for users
    c.KubeSpawner.user_storage_pvc_ensure = True
    c.KubeSpawner.user_storage_capacity = '5Gi'
    c.KubeSpawner.pvc_name_template = 'jupyter-user-{username}'
    c.KubeSpawner.volumes = [
        {
            'name': 'user-data',
            'persistentVolumeClaim': {
                'claimName': c.KubeSpawner.pvc_name_template
            }
        }
    ]
    c.KubeSpawner.volume_mounts = [
        {
            'name': 'user-data',
            'mountPath': '/home/jovyan/work'
        }
    ]
    
    # Environment variables for user containers
    c.KubeSpawner.environment = {
        'JUPYTER_ENABLE_LAB': 'yes',
        'GRANT_SUDO': 'no',
    }
    
    # Set notebook directory and default URL
    c.Spawner.notebook_dir = '/home/jovyan/work'
    c.Spawner.default_url = '/lab'
    
    # Debug logging
    c.JupyterHub.log_level = 'DEBUG'
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jupyterhub-data-pvc
  namespace: jupyter-system
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jupyterhub
  namespace: jupyter-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jupyterhub
  template:
    metadata:
      labels:
        app: jupyterhub
    spec:
      serviceAccountName: jupyterhub
      containers:
      - name: jupyterhub
        image: nexus.adlibml.com/jupyterhub:latest
        ports:
          - containerPort: 8000
        env:
          - name: ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: jupyterhub-secret
                key: admin_password
          - name: COOKIE_SECRET
            valueFrom:
              secretKeyRef:
                name: jupyterhub-secret
                key: cookie_secret
        volumeMounts:
          - name: hub-config
            mountPath: /srv/jupyterhub/jupyterhub_config.py
            subPath: jupyterhub_config.py
          - name: hub-data
            mountPath: /data
        resources:
          requests:
            cpu: "500m"
            memory: "512Mi"
          limits:
            cpu: "1"
            memory: "1Gi"
        securityContext:
          allowPrivilegeEscalation: false
          runAsUser: 1000
      volumes:
        - name: hub-config
          configMap:
            name: jupyterhub-config
            items:
              - key: jupyterhub_config.py
                path: jupyterhub_config.py
        - name: hub-data
          persistentVolumeClaim:
            claimName: jupyterhub-data-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: jupyterhub
  namespace: jupyter-system
spec:
  selector:
    app: jupyterhub
  ports:
    - name: http
      port: 8000
      targetPort: 8000
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: jupyterhub-ingress
  namespace: jupyter-system
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
spec:
  rules:
  - host: jupyter.adlibml.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: jupyterhub
            port:
              number: 8000
